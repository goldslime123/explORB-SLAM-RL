// Generated by gencpp from file orb_slam2_ros/ORBState.msg
// DO NOT EDIT!


#ifndef ORB_SLAM2_ROS_MESSAGE_ORBSTATE_H
#define ORB_SLAM2_ROS_MESSAGE_ORBSTATE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace orb_slam2_ros
{
template <class ContainerAllocator>
struct ORBState_
{
  typedef ORBState_<ContainerAllocator> Type;

  ORBState_()
    : header()
    , state(0)  {
    }
  ORBState_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , state(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint16_t _state_type;
  _state_type state;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(UNKNOWN)
  #undef UNKNOWN
#endif
#if defined(_WIN32) && defined(SYSTEM_NOT_READY)
  #undef SYSTEM_NOT_READY
#endif
#if defined(_WIN32) && defined(NO_IMAGES_YET)
  #undef NO_IMAGES_YET
#endif
#if defined(_WIN32) && defined(NOT_INITIALIZED)
  #undef NOT_INITIALIZED
#endif
#if defined(_WIN32) && defined(OK)
  #undef OK
#endif
#if defined(_WIN32) && defined(LOST)
  #undef LOST
#endif

  enum {
    UNKNOWN = 0u,
    SYSTEM_NOT_READY = 1u,
    NO_IMAGES_YET = 2u,
    NOT_INITIALIZED = 3u,
    OK = 4u,
    LOST = 5u,
  };


  typedef boost::shared_ptr< ::orb_slam2_ros::ORBState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::orb_slam2_ros::ORBState_<ContainerAllocator> const> ConstPtr;

}; // struct ORBState_

typedef ::orb_slam2_ros::ORBState_<std::allocator<void> > ORBState;

typedef boost::shared_ptr< ::orb_slam2_ros::ORBState > ORBStatePtr;
typedef boost::shared_ptr< ::orb_slam2_ros::ORBState const> ORBStateConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::orb_slam2_ros::ORBState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::orb_slam2_ros::ORBState_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::orb_slam2_ros::ORBState_<ContainerAllocator1> & lhs, const ::orb_slam2_ros::ORBState_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.state == rhs.state;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::orb_slam2_ros::ORBState_<ContainerAllocator1> & lhs, const ::orb_slam2_ros::ORBState_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace orb_slam2_ros

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::orb_slam2_ros::ORBState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::orb_slam2_ros::ORBState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::orb_slam2_ros::ORBState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::orb_slam2_ros::ORBState_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::orb_slam2_ros::ORBState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::orb_slam2_ros::ORBState_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::orb_slam2_ros::ORBState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "22250095e5e0ac7a4ef7c210f7bab3e7";
  }

  static const char* value(const ::orb_slam2_ros::ORBState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x22250095e5e0ac7aULL;
  static const uint64_t static_value2 = 0x4ef7c210f7bab3e7ULL;
};

template<class ContainerAllocator>
struct DataType< ::orb_slam2_ros::ORBState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "orb_slam2_ros/ORBState";
  }

  static const char* value(const ::orb_slam2_ros::ORBState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::orb_slam2_ros::ORBState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"uint16 state # State from Tracking.h\n"
"# constants for enum-like access\n"
"uint16 UNKNOWN=0\n"
"uint16 SYSTEM_NOT_READY=1\n"
"uint16 NO_IMAGES_YET=2\n"
"uint16 NOT_INITIALIZED=3\n"
"uint16 OK=4\n"
"uint16 LOST=5\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::orb_slam2_ros::ORBState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::orb_slam2_ros::ORBState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.state);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ORBState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::orb_slam2_ros::ORBState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::orb_slam2_ros::ORBState_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "state: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.state);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ORB_SLAM2_ROS_MESSAGE_ORBSTATE_H
